@using FormularioVentas.Entities.Cliente
@using FormularioVentas.Entities.Representante
@using FormularioVentas.Client.Services.Empleado
@using FormularioVentas.Client.Services.Cliente

@inject NavigationManager navigationManager
@inject RegistroVentasService registroVentasService
@inject ClienteService clienteService

<h3>@Titulo</h3>

<EditForm Model="@clienteVentas" OnValidSubmit="@Guardar">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col-md-6">
            <div class="mt-3">
                <label>Número de Cliente</label>
                <InputNumber readonly class="form-control" @bind-Value="clienteVentas.codigoCliente" />
                <ValidationMessage For="(() => clienteVentas.codigoCliente)" />
            </div>

            <div class="mt-3">
                <label>Nombre del Cliente</label>
                <InputText class="form-control" @bind-Value="clienteVentas.nombreCliente" />
                <ValidationMessage For="(() => clienteVentas.nombreCliente)" />
            </div>

            <div class="mt-3">
                <label>Seleccione Representante</label>
                <InputSelect class="form-control" @bind-Value="clienteVentas.representanteAsignado">
                    <option value="0">--Seleccione--</option>
                    @foreach (var item in listaRepresentantes)
                    {
                        <option value="@item.Num_Empl">@item.Nombre</option>
                    }
                </InputSelect>
                <ValidationMessage For="(() => clienteVentas.representanteAsignado)" />
            </div>

            <div style="margin:20px 5px">
                <button class="btn btn-danger" @onclick="Regresar">Regresar</button>
            </div>
        </div>

        <div class="col-md-6">

            <div class="mt-3">
                <label>Limite de Crédito</label>
                <InputNumber class="form-control" @bind-Value="clienteVentas.limiteCredito" />
                <ValidationMessage For="(() => clienteVentas.limiteCredito)" />
            </div>
            <div class="mt-3">
                <button type="submit" class="btn btn-primary">Guardar</button>
                <button class="btn btn-danger" @onclick="Regresar">Cancelar</button>
            </div>
        </div>

    </div>
</EditForm>


@code {
    public ClienteVentas clienteVentas { get; set; } = new ClienteVentas();

    [Parameter]
    public int codigoCliente { get; set; }

    public string Titulo { get; set; } = " ";

    public List<ListaRepresentante> listaRepresentantes { get; set; } = new List<ListaRepresentante>();

    protected override Task OnInitializedAsync()
    {
        listaRepresentantes = registroVentasService.ListarEmpleados();

        if (codigoCliente == 0) Titulo = "Agregar Cliente";
        else
        {
            Titulo = "Editar Cliente";
            clienteVentas = clienteService.RecuperarIdCliente(codigoCliente);
        }
        return base.OnInitializedAsync();
    }
    public void Guardar()
    {
        clienteService.GuardarCliente(clienteVentas);
        navigationManager.NavigateTo("/RegistroClientes/tabla");
    }
    private void Regresar()
    {
        navigationManager.NavigateTo("/RegistroClientes/tabla");
    }
}
